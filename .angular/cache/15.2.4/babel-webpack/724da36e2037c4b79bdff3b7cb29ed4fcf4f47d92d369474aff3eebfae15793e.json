{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class IllustrationService {\n  constructor(http) {\n    this.http = http;\n    this.endpoint = '';\n    this.API_URL = environment.urlApi;\n    this.storage = window.localStorage;\n    this.endpoint = `${this.API_URL}/illustrations`;\n    this.header = {\n      'content-type': 'application/json',\n      'access-token': this.storage.getItem('access-token')\n    };\n  }\n  index(params) {\n    let queries = [];\n    let url = `${this.endpoint}`;\n    for (const [key, value] of Object.entries(params)) {\n      if (Array.isArray(value)) {\n        value.forEach(el => queries.push(`${key}[]=${el}`));\n      } else {\n        if (value != null) {\n          if (typeof value === 'string' || typeof value === 'number') queries.push(`${key}=${value}`);\n          if (typeof value === 'boolean') queries.push(`${key}=${value ? 1 : 0}`);\n        }\n      }\n    }\n    return this.http.get(`${url}?${queries.join('&')}`, {\n      headers: this.header\n    }).pipe(tap(res => {\n      return res;\n    }), catchError(err => {\n      return throwError(err);\n    }));\n  }\n  list() {\n    let queries = [];\n    let url = `${this.endpoint}/list`;\n    return this.http.get(`${url}?${queries.join('&')}`, {\n      headers: this.header\n    }).pipe(tap(res => {\n      return res;\n    }), catchError(err => {\n      return throwError(err);\n    }));\n  }\n}\nIllustrationService.ɵfac = function IllustrationService_Factory(t) {\n  return new (t || IllustrationService)(i0.ɵɵinject(i1.HttpClient));\n};\nIllustrationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: IllustrationService,\n  factory: IllustrationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,QAAQ,MAAM;AACjC,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;AAEhD,SAASC,WAAW,QAAQ,mCAAmC;;;AAK/D,OAAM,MAAOC,mBAAmB;EAO5BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,aAAQ,GAAW,EAAE;IAIzB,IAAI,CAACC,OAAO,GAAGJ,WAAW,CAACK,MAAM;IACjC,IAAI,CAACC,OAAO,GAAGC,MAAM,CAACC,YAAY;IAClC,IAAI,CAACC,QAAQ,GAAG,GAAG,IAAI,CAACL,OAAO,gBAAgB;IAC/C,IAAI,CAACM,MAAM,GAAG;MACV,cAAc,EAAE,kBAAkB;MAClC,cAAc,EAAE,IAAI,CAACJ,OAAO,CAACK,OAAO,CAAC,cAAc;KACtD;EACL;EAGOC,KAAK,CAACC,MAAW;IACpB,IAAIC,OAAO,GAAa,EAAE;IAC1B,IAAIC,GAAG,GAAW,GAAI,IAAI,CAACN,QAAS,EAAE;IAEtC,KAAI,MAAM,CAAEO,GAAG,EAAEC,KAAK,CAAE,IAAIC,MAAM,CAACC,OAAO,CAACN,MAAM,CAAC,EAAE;MAC/C,IAAGO,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,EAAE;QACrBA,KAAK,CAACK,OAAO,CAACC,EAAE,IAAIT,OAAO,CAACU,IAAI,CAAC,GAAGR,GAAG,MAAMO,EAAE,EAAE,CAAC,CAAC;OACtD,MAAM;QACH,IAAGN,KAAK,IAAI,IAAI,EAAE;UACd,IAAG,OAAOA,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAEH,OAAO,CAACU,IAAI,CAAC,GAAGR,GAAG,IAAIC,KAAK,EAAE,CAAC;UAC1F,IAAG,OAAOA,KAAK,KAAK,SAAS,EAAEH,OAAO,CAACU,IAAI,CAAC,GAAGR,GAAG,IAAIC,KAAK,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;;;;IAKlF,OAAO,IAAI,CAACd,IAAI,CAACsB,GAAG,CAAC,GAAGV,GAAG,IAAKD,OAAO,CAACY,IAAI,CAAC,GAAG,CAAE,EAAE,EAAE;MAAEC,OAAO,EAAE,IAAI,CAACjB;IAAM,CAAE,CAAC,CAACkB,IAAI,CAChF9B,GAAG,CAAC+B,GAAG,IAAG;MAAG,OAAOA,GAAG;IAAC,CAAC,CAAE,EAC3B9B,UAAU,CAAC+B,GAAG,IAAG;MAAG,OAAOjC,UAAU,CAACiC,GAAG,CAAC;IAAC,CAAC,CAAC,CAChD;EACL;EAEMC,IAAI;IACP,IAAIjB,OAAO,GAAa,EAAE;IAC1B,IAAIC,GAAG,GAAW,GAAI,IAAI,CAACN,QAAS,OAAO;IAE1C,OAAO,IAAI,CAACN,IAAI,CAACsB,GAAG,CAAC,GAAGV,GAAG,IAAKD,OAAO,CAACY,IAAI,CAAC,GAAG,CAAE,EAAE,EAAE;MAAEC,OAAO,EAAE,IAAI,CAACjB;IAAM,CAAE,CAAC,CAACkB,IAAI,CAChF9B,GAAG,CAAC+B,GAAG,IAAG;MAAG,OAAOA,GAAG;IAAC,CAAC,CAAE,EAC3B9B,UAAU,CAAC+B,GAAG,IAAG;MAAG,OAAOjC,UAAU,CAACiC,GAAG,CAAC;IAAC,CAAC,CAAC,CAChD;EACL;;AA/CQ7B,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAA+B,SAAnB/B,mBAAmB;EAAAgC,YAFhB;AAAM","names":["throwError","tap","catchError","environment","IllustrationService","constructor","http","API_URL","urlApi","storage","window","localStorage","endpoint","header","getItem","index","params","queries","url","key","value","Object","entries","Array","isArray","forEach","el","push","get","join","headers","pipe","res","err","list","factory","providedIn"],"sourceRoot":"","sources":["/Users/programadorweb/Documents/Digital Thinkers/web-pacto/src/app/services/illustration/illustration.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\nimport { throwError } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\n\nimport { environment } from '../../../environments/environment';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IllustrationService {\n    private API_URL: string;\n    private storage: Storage;\n    private header: any;\n    private endpoint: string = '';\n\n\n    constructor(private http: HttpClient) {\n        this.API_URL = environment.urlApi;\n        this.storage = window.localStorage;\n        this.endpoint = `${this.API_URL}/illustrations`;\n        this.header = {\n            'content-type': 'application/json',\n            'access-token': this.storage.getItem('access-token'),\n        };\n    }\n\n\n    public index(params: any) {\n        let queries: string[] = [];\n        let url: string = `${ this.endpoint }`;\n\n        for(const [ key, value ] of Object.entries(params)) {\n             if(Array.isArray(value)) {\n                 value.forEach(el => queries.push(`${key}[]=${el}`));\n             } else {\n                 if(value != null) {\n                     if(typeof value === 'string' || typeof value === 'number') queries.push(`${key}=${value}`);\n                     if(typeof value === 'boolean') queries.push(`${key}=${value ? 1 : 0}`);\n                 }\n             }\n         }\n\n         return this.http.get(`${url}?${ queries.join('&') }`, { headers: this.header }).pipe(\n             tap(res => { return res } ),\n             catchError(err => { return throwError(err) })\n         );\n     }\n\n    public list() {\n        let queries: string[] = [];\n        let url: string = `${ this.endpoint }/list`;\n\n         return this.http.get(`${url}?${ queries.join('&') }`, { headers: this.header }).pipe(\n             tap(res => { return res } ),\n             catchError(err => { return throwError(err) })\n         );\n     }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}